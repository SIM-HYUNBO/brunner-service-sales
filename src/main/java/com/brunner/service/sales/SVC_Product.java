/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.brunner.service.sales;

import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.annotation.PostConstruct;

import org.apache.ibatis.session.SqlSession;
import org.springframework.stereotype.Component;

import com.brunner.service.SVC_AuthorityGroup.Constants_AuthorityGroup;
import com.brunner.service.SVC_AuthorityGroup.Messages_AuthorityGroup;
import com.brunner.service.sales.dao.TB_CUS_PRODUCT_MST;
import com.brunner.service.util.Constants;
import com.brunner.service.util.ExceptionUtil;
import com.brunner.service.util.MapUtil;
import com.brunner.service.util.Messages;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import mw.utility.BrunnerLogger;

@Component
public class SVC_Product {
	private final String CLASS = this.getClass().getName();
	private final Logger logger = BrunnerLogger.getLogger(CLASS);

	@PostConstruct
	public void init() {
		System.out.println(String.format("init bean [%s]", this.getClass().getName()));
	}	
	
	public JsonObject TXN_Product_registerProduct(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_Product.resultCode_systemException;
		String resultMessage = Constants_Product.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
			
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   			

   		int nEffected = 0;
   		
   		try {
    		List<HashMap<String, Object>> rows = TB_CUS_PRODUCT_MST.select_02(
    				session,
    				txnId,
    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("productName").getAsString(),
    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("productUnit").getAsString()
    				);
			
   			if(rows.size() > 0) {
	   			nEffected = TB_CUS_PRODUCT_MST.update_01(
	   					session,
	   					txnId,
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("productDesc").getAsString(),
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("unitPrice").getAsString(),
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("productName").getAsString(),
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("productUnit").getAsString()
	    				);
	
				if(nEffected == 1) {
	    			resultCode = Constants_Product.resultCode_success;
	    			resultMessage = String.format(Messages_Product.msg_successfullyFinished, CLASS, METHOD);
				} else if(nEffected == 0) {
	    			resultCode = Constants_Product.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_Product.msg_failToUpdateData);
				} else {
					// 오류: 여러건 변경
	    			resultCode = Constants_Product.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_Product.msg_affectedDataMoreThanOneRow);
				}
   			} else {
	   			nEffected = TB_CUS_PRODUCT_MST.insert_01(
	   					session,
	   					txnId,
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("productName").getAsString(),
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("productUnit").getAsString(),
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("productDesc").getAsString(),
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("unitPrice").getAsString(),
	    				"Y"
	    				);
	
				if(nEffected == 1) {
	    			resultCode = Constants_Product.resultCode_success;
	    			resultMessage = String.format(Messages_Product.msg_successfullyFinished, CLASS, METHOD);
				} else if(nEffected == 0) {
					// 오류: 변경행 없음  			resultCode = Constants_Product.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_Product.msg_failToUpdateData);
				} else {
					// 오류: 여러건 변경
	    			resultCode = Constants_Product.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_Product.msg_affectedDataMoreThanOneRow);
				}
   			}
		} catch (Exception e) {
			resultCode = Constants_Product.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			reply = new JsonObject();
			reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);

			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }
	
	public JsonObject TXN_Product_unregisterProduct(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_Product.resultCode_systemException;
		String resultMessage = Constants_Product.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
			
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   	

   		int nEffected = 0;
   		
   		try {
    		List<HashMap<String, Object>> rows = TB_CUS_PRODUCT_MST.select_02(
    				session,
    				txnId,
    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("productName").getAsString(),
    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("productUnit").getAsString()
    				);
			
   			if(rows.size() > 0) {
	   			nEffected = TB_CUS_PRODUCT_MST.update_02(
	   					session,
	   					txnId,
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("productName").getAsString(),
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("productUnit").getAsString()
	    				);
	
				if(nEffected == 1) {
	    			resultCode = Constants_Product.resultCode_success;
	    			resultMessage = String.format(Messages_Product.msg_successfullyFinished, CLASS, METHOD);
				} else if(nEffected == 0) {
	    			resultCode = Constants_Product.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_Product.msg_failToUpdateData);
				} else {
	    			resultCode = Constants_Product.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_Product.msg_affectedDataMoreThanOneRow);
				}
   			} else {
	   			nEffected = TB_CUS_PRODUCT_MST.insert_01(
	   					session,
	   					txnId,
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString(),
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("productName").getAsString(),
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("productUnit").getAsString(),
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("productDesc").getAsString(),
	    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("unitPrice").getAsString(),
	    				"Y"
	    				);
	
				if(nEffected == 1) {
	    			resultCode = Constants_Product.resultCode_success;
	    			resultMessage = String.format(Messages_Product.msg_successfullyFinished, CLASS, METHOD);
				} else if(nEffected == 0) {
					// 오류: 변경행 변경행 없음	resultCode = Constants_Product.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_Product.msg_failToUpdateData);
				} else {
					// 오류: 여러건 변경
	    			resultCode = Constants_Product.resultCode_failToUpdateData;
	    			resultMessage = String.format(Messages_Product.msg_affectedDataMoreThanOneRow);
				}
   			}
		} catch (Exception e) {
			resultCode = Constants_Product.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			reply = new JsonObject();
			reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);

			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }	

	public JsonObject TXN_Product_viewProductList(
			SqlSession session,
			JsonObject request) {
		
		final String METHOD = new Exception().getStackTrace()[0].getMethodName();
		
		JsonObject reply = null;
		String resultCode = Constants_Product.resultCode_systemException;
		String resultMessage = Constants_Product.emptyString;
		String txnId = request.get(Constants.msgFieldName_inputData).getAsJsonObject().get(Constants.msgFieldName_txnId).getAsString();
			
   		logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_startService, 
   				txnId, 
   				CLASS, 
   				METHOD));   	

   		List<HashMap<String, Object>> rows = null;
   		
   		try {
    		rows = TB_CUS_PRODUCT_MST.select_01(
    				session,
    				txnId,
    				request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("systemCode").getAsString(), 
    				String.format("%s", request.get(Constants_Product.msgFieldName_inputData).getAsJsonObject().get("userId").getAsString()));

    		JsonArray jProductList = new JsonArray();
    		for(int rowIndex = 0; rowIndex < rows.size(); rowIndex++) {
    			JsonObject jRow = new JsonObject();
    			HashMap<String, Object> row = rows.get(rowIndex);
    			jRow.addProperty("productName", row.get("PRODUCT_NAME").toString());
       			jRow.addProperty("productUnit", MapUtil.getNullableString(row, "PRODUCT_UNIT"));
       		    jRow.addProperty("productDesc", MapUtil.getNullableString(row, "PRODUCT_DESC"));
       			jRow.addProperty("unitPrice", MapUtil.getNullableString(row, "UNIT_PRICE"));
    			jRow.addProperty("createUserId", MapUtil.getNullableString(row, "CREATE_USER_ID"));
    			jRow.addProperty("createTime", MapUtil.getNullableString(row, "CREATE_TIME").toString());
    			jRow.addProperty("updateUserId", MapUtil.getNullableString(row, "UPDATE_USER_ID"));
    			jRow.addProperty("updateTime", MapUtil.getNullableString(row, "UPDATE_TIME").toString());
    			
    			jProductList.add(jRow);
    		}

    		reply = new JsonObject();
    		reply.addProperty(Constants.msgFieldName_txnId, txnId);
			reply.add("productList", jProductList);

    		resultCode = Constants_AuthorityGroup.resultCode_success;

    		reply.addProperty(Constants.msgFieldName_resultCode, resultCode);
			reply.addProperty(Constants.msgFieldName_resultMessage, resultMessage);
    		
		} catch (Exception e) {
			resultCode = Constants_Product.resultCode_systemException;
			resultMessage = ExceptionUtil.getFullMessage(e);
			logger.log(Level.SEVERE, resultMessage);
		}
		finally {
			logger.log(Level.INFO, String.format(Messages_AuthorityGroup.msg_endService, 
	   				txnId, 
	   				CLASS, 
	   				METHOD));
		}
		return reply;
    }	
	
	class Constants_Product extends Constants {
	}	

	static class Messages_Product extends Messages {
		public static String msg_alreadyExistProduct = "Product [%s], Unit [%s] already exist.";
	}	
}
